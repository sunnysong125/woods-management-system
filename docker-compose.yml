version: '3.8'

services:
  # PostgreSQL 資料庫
  db:
    image: postgres:13
    container_name: woods-db
    environment:
      POSTGRES_DB: woodsdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - woods-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (可選 - 用於快取和會話)
  redis:
    image: redis:7-alpine
    container_name: woods-redis
    ports:
      - "6379:6379"
    networks:
      - woods-network
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # 後端 Django API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: woods-backend
    environment:
      - DEBUG=0
      - DATABASE_URL=postgres://postgres:postgres@db:5432/woodsdb
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - CORS_ALLOWED_ORIGINS=http://localhost:8080,https://localhost:8080
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - woods-network
    restart: unless-stopped

  # 前端 Vue.js 應用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: woods-frontend
    ports:
      - "8080:8080"
    depends_on:
      - backend
    networks:
      - woods-network
    restart: unless-stopped

  # Nginx 負載均衡器 (生產環境)
  nginx:
    image: nginx:1.25-alpine
    container_name: woods-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_volume:/var/www/static
      - media_volume:/var/www/media
    depends_on:
      - frontend
      - backend
    networks:
      - woods-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    name: woods_postgres_data
  redis_data:
    name: woods_redis_data
  static_volume:
    name: woods_static
  media_volume:
    name: woods_media

networks:
  woods-network:
    name: woods-network
    driver: bridge 