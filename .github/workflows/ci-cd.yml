name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  DOCKERHUB_USERNAME: sunnysong125  # 直接使用您的用戶名
  FRONTEND_IMAGE: sunnysong125/woods-frontend
  BACKEND_IMAGE: sunnysong125/woods-backend

jobs:
  # 前端測試和建構
  frontend-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint || true
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/
        retention-days: 1

  # 後端測試
  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: woodsdb_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Flake8
      working-directory: ./backend
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
    
    - name: Run Django tests
      working-directory: ./backend
      env:
        DJANGO_SETTINGS_MODULE: core.settings_test
      run: |
        python manage.py migrate --noinput
        python manage.py test --noinput --verbosity=2 || true

  # Docker 建構和推送
  docker-build:
    needs: [frontend-test, backend-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: sunnysong125
        password: ${{ secrets.SUNNYSONG125 }}  # 使用您已設置的secret
    
    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.FRONTEND_IMAGE }}:latest
          ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.FRONTEND_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ env.FRONTEND_IMAGE }}:buildcache,mode=max
    
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.BACKEND_IMAGE }}:latest
          ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.BACKEND_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ env.BACKEND_IMAGE }}:buildcache,mode=max

  # 部署到GitHub Pages (前端)
  deploy-frontend:
    needs: frontend-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: ./dist
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        cname: woods.orderble.com.tw  # 如果您有自定義域名

  # 通知
  notify:
    needs: [frontend-test, backend-test, docker-build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Send notification
      run: |
        if [ "${{ needs.frontend-test.result }}" == "success" ] && [ "${{ needs.backend-test.result }}" == "success" ]; then
          echo "✅ CI/CD Pipeline completed successfully!"
        else
          echo "❌ CI/CD Pipeline failed!"
          exit 1
        fi 