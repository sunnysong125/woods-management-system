name: 🌳 Woods Management System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 允許手動觸發

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # 前端測試和建構
  frontend-test-build:
    name: 🖥️ Frontend Test & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: 🛎️ Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📚 Install frontend dependencies
      working-directory: ./frontend
      run: |
        npm ci
        
    - name: 🧪 Run frontend linting
      working-directory: ./frontend
      run: |
        npm run lint
        
    - name: 🏗️ Build frontend
      working-directory: ./frontend
      run: |
        npm run build
        
    - name: 📤 Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/
        retention-days: 7

  # 後端測試
  backend-test:
    name: 🔧 Backend Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: woods_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: 🛎️ Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: 📚 Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest-django
        
    - name: 🔍 Run backend linting
      working-directory: ./backend
      run: |
        python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        python -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: 🧪 Run backend tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/woods_test
        DJANGO_SETTINGS_MODULE: woodsbackend.settings
      run: |
        python manage.py collectstatic --noinput
        python manage.py migrate
        coverage run --source='.' manage.py test
        coverage report
        coverage xml
        
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # 建構Docker映像
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [frontend-test-build, backend-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🛎️ Checkout code
      uses: actions/checkout@v4
      
    - name: 📤 Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/
        
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: 🏗️ Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/woods-backend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/woods-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🏗️ Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/woods-frontend:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/woods-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 部署到GitHub Pages (前端)
  deploy-frontend:
    name: 🚀 Deploy Frontend to GitHub Pages
    runs-on: ubuntu-latest
    needs: frontend-test-build
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: 🛎️ Checkout code
      uses: actions/checkout@v4
      
    - name: 📤 Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: dist/
        
    - name: 📄 Setup Pages
      uses: actions/configure-pages@v4
      
    - name: 📤 Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist/
        
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # 部署通知
  notify-success:
    name: 📢 Deployment Success
    runs-on: ubuntu-latest
    needs: [deploy-frontend, docker-build]
    if: success()
    
    steps:
    - name: 🎉 Success notification
      run: |
        echo "🎉 Woods Management System 部署成功！"
        echo "🌐 前端URL: https://${{ github.repository_owner }}.github.io/woods"
        echo "🐳 後端Docker: ${{ secrets.DOCKERHUB_USERNAME }}/woods-backend:latest"
        echo "📱 前端Docker: ${{ secrets.DOCKERHUB_USERNAME }}/woods-frontend:latest"

  # 失敗通知
  notify-failure:
    name: 💥 Deployment Failure
    runs-on: ubuntu-latest
    needs: [frontend-test-build, backend-test, docker-build, deploy-frontend]
    if: failure()
    
    steps:
    - name: ❌ Failure notification
      run: |
        echo "❌ Woods Management System 部署失敗！"
        echo "請檢查 GitHub Actions 日誌以獲取詳細錯誤信息" 